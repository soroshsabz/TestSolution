using BSN.Resa.DoctorApp.Commons.Utilities;
using BSN.Resa.DoctorApp.Data.Infrastructure;
using BSN.Resa.DoctorApp.Data.Repository;
using BSN.Resa.DoctorApp.Domain.Models;
using BSN.Resa.DoctorApp.Domain.Utilities;
using BSN.Resa.DoctorApp.Services;
using Plugin.Badge.Abstractions;
using Plugin.LocalNotifications;
using Plugin.LocalNotifications.Abstractions;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;

namespace BSN.Resa.DoctorApp.Droid.EventConsumers.CallStateChangedConsumers
{
    public class CallbackRequestsCallStateChangedConsumer : ICallStateChangedConsumer
    {
        #region Constructor

        public CallbackRequestsCallStateChangedConsumer(IDoctorRepository doctorRepository,
            ICallbackRequestRepository callbackRequestRepository,
            IUnitOfWork unitOfWork,
            IBadge appIconBadge,
            ILocalNotifications localNotifications,
            ICrashReporter crashReporter)
        {
            _doctorRepository = doctorRepository;
            _callbackRequestRepository = callbackRequestRepository;
            _unitOfWork = unitOfWork;
            _appIconBadge = appIconBadge;
            _localNotifications = localNotifications;
            _crashReporter = crashReporter;
        }

        #endregion

        public async void OnCallStateChanged(object sender, CallStateChangedEventArges arg)
        {
            if (arg.State != CallState.Ended)
                return;

            var doctor = _doctorRepository.Get(includeContacts: false);

            if (!doctor.IsLoggedIn)
                return;

            try
            {
                var callbackRequests = await doctor.GetActiveCallbackRequestsAsync();

                if (callbackRequests == null || !callbackRequests.Any())
                    return;

                int numberOfNewCallbackRequests = 0;

                foreach (var serverCallbackRequest in callbackRequests)
                {
                    var dbCallbackRequest = _callbackRequestRepository.Get(serverCallbackRequest.Id);

                    if (dbCallbackRequest == null)
                    {
                        numberOfNewCallbackRequests++;
                        _callbackRequestRepository.Add(serverCallbackRequest);
                    }
                    else
                    {
                        if (serverCallbackRequest.ConsentGivenAt != dbCallbackRequest.ConsentGivenAt)
                        {
                            dbCallbackRequest.ResetAppSideLocalValues();
                            numberOfNewCallbackRequests++;
                        }

                        DoctorAppAutoMapper.Instance.Map(serverCallbackRequest, dbCallbackRequest);

                        _callbackRequestRepository.Update(dbCallbackRequest);
                    }
                }

                _unitOfWork.Commit();

                if (numberOfNewCallbackRequests <= 0)
                    return;

                int numberOfDistinctCallers = callbackRequests.Distinct(new CustomCallbackCallerComparer()).Count();

                NotifyDoctor(numberOfNewCallbackRequests, numberOfDistinctCallers);
            }
            catch (Exception exception)
            {
                _crashReporter.SendException(exception);
            }
        }

        private void NotifyDoctor(int numberOfNewCallbackRequests, int numberOfDistinctCallers)
        {
            var title = Locale.Resources.ResaSystem;

            try
            {
                int badgeCount;
                string message;

                if (numberOfNewCallbackRequests == 1)
                {
                    message = Locale.Resources.DoctorAppOneCallbackRequestFromPatient;
                    badgeCount = 1;
                }
                else if (numberOfDistinctCallers == 1)
                {
                    message =
                        $"{numberOfNewCallbackRequests.ToString(CultureInfo.InvariantCulture)} {Locale.Resources.DoctorAppCallbackRequestsFromOnePatient}";

                    badgeCount = 1;
                }
                else
                {
                    message =
                        $"{numberOfNewCallbackRequests.ToString(CultureInfo.InvariantCulture)} {Locale.Resources.DoctorAppCallbackRequestsFrom} {numberOfDistinctCallers.ToString(CultureInfo.InvariantCulture)} {Locale.Resources.DoctorAppPatients}";

                    badgeCount = numberOfDistinctCallers;
                }

                SendLocalNotification(title, message, badgeCount);
            }
            catch (ArgumentException)
            {
                //Generated by extension method "ToPersianNumber"
                string message = Locale.Resources.DoctorAppNewCallbackRequestFromPatient;
                int badgeCount = 1;
                SendLocalNotification(title, message, badgeCount);
            }
        }

        private void SendLocalNotification(string title, string message, int badgeCount)
        {
            _appIconBadge.ClearBadge();
            LocalNotificationsImplementation.NotificationIconId = Resource.Drawable.resa_icon_notification;
            _appIconBadge.SetBadge(badgeCount);
            _localNotifications.Show(title, message, id: 2001);
        }

        private class CustomCallbackCallerComparer : IEqualityComparer<CallbackRequest>
        {
            public bool Equals(CallbackRequest x, CallbackRequest y)
            {
                bool areBothNumbersAreNullOrEmpty = (x == null && y == null) ||
                                                    (x == null && y.CallerSubscriberNumber.IsNullOrEmptyOrSpace())
                                                    || (y == null && x.CallerSubscriberNumber.IsNullOrEmptyOrSpace());

                if (areBothNumbersAreNullOrEmpty)
                    return true;
                if (x == null || y == null)
                    return false;
                if (string.Equals(x.CallerSubscriberNumber, y.CallerSubscriberNumber,
                    StringComparison.InvariantCultureIgnoreCase))
                    return true;

                return false;
            }

            public int GetHashCode(CallbackRequest obj)
            {
                if (obj == null || obj.CallerSubscriberNumber.IsNullOrEmptyOrSpace())
                    return 0;

                return obj.CallerSubscriberNumber.ToLowerInvariant().GetHashCode();
            }
        }

        #region Fields

        private readonly IDoctorRepository _doctorRepository;
        private readonly ICallbackRequestRepository _callbackRequestRepository;
        private readonly IUnitOfWork _unitOfWork;
        private readonly IBadge _appIconBadge;
        private readonly ILocalNotifications _localNotifications;
        private readonly ICrashReporter _crashReporter;

        #endregion
    }
}